# Nom du workflow
name: GitHub Actions Demo

# Nom de l'ex√©cution du workflow, qui inclut le nom de l'utilisateur qui a d√©clench√© le workflow
run-name: ${{ github.actor }} is testing out GitHub Actions üöÄ

# √âv√©nement qui d√©clenche le workflow, ici un push sur le d√©p√¥t
on: [push]

# D√©finition des jobs √† ex√©cuter
jobs:
  # Job pour le build
  Build:
    # Sp√©cifie que le job doit √™tre ex√©cut√© sur une machine virtuelle avec la derni√®re version d'Ubuntu
    runs-on: ubuntu-latest

    # Liste des √©tapes √† ex√©cuter dans le job
    steps:
      # √âtape 1 : Affiche un message indiquant que le job a √©t√© d√©clench√© par un √©v√©nement push
      - run: echo "üéâ The job was automatically triggered by a ${{ github.event_name }} event."

      # √âtape 2 : Affiche un message indiquant que le job est en cours d'ex√©cution sur un serveur Ubuntu h√©berg√© par GitHub
      - run: echo "üêß This job is now running on a ${{ runner.os }} server hosted by GitHub!"

      # √âtape 3 : Affiche un message avec le nom de la branche et le d√©p√¥t
      - run: echo "üîé The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."

      # √âtape 4 : Utilise l'action checkout pour cloner le d√©p√¥t sur le runner
      - name: Check out repository code
        uses: actions/checkout@v4

      # √âtape 5 : Affiche un message indiquant que le d√©p√¥t a √©t√© clon√© sur le runner
      - run: echo "üí° The ${{ github.repository }} repository has been cloned to the runner."

      # √âtape 6 : Effectue une installation propre des d√©pendances en utilisant npm ci
      - name: Clean install dependencies
        run: |
          npm ci

      # √âtape 7 : Construit le projet en utilisant npm
      - name: Build
        run: |
          npm run build

      # √âtape 8 : Sauvegarde le cache des d√©pendances (node_modules)
      # Cela permet de r√©utiliser les d√©pendances d√©j√† install√©es dans les ex√©cutions futures du workflow,
      # ce qui peut acc√©l√©rer les builds en √©vitant de r√©installer les d√©pendances √† chaque fois.
      - name: Save cache (node_modules)
        uses: actions/cache/save@v4  # Utilise l'action de cache pour sauvegarder le cache
        with:
          path: |
            node_modules
            /home/runner/.cache/Cypress
          key: ${{ runner.os }}-node_modules-${{ hashFiles('**/package-lock.json') }}  # Cl√© unique pour identifier le cache
          # La cl√© est bas√©e sur le syst√®me d'exploitation du runner et le hash du fichier package-lock.json
          # Cela permet de s'assurer que le cache est mis √† jour lorsque les d√©pendances changent

  # Job pour les tests, qui d√©pend du job Build
  Test:
    # Ce job d√©pend du job Build, donc il ne s'ex√©cute que si le job Build r√©ussit
    needs: Build

     # Utilisation d'une matrice pour tester sur diff√©rents navigateurs
    strategy:
      matrix:
        browser: [chrome, firefox, edge]

    # Sp√©cifie que le job doit √™tre ex√©cut√© sur une machine virtuelle avec la derni√®re version d'Ubuntu
    runs-on: ubuntu-latest

    # Liste des √©tapes √† ex√©cuter dans le job
    steps:
      # √âtape 1 : Affiche un message indiquant que le job de test est en cours d'ex√©cution
      - run: echo "üñ•Ô∏è The workflow is now ready to test your code on the runner."

      # √âtape 2 : Utilise l'action checkout pour cloner le d√©p√¥t sur le runner
      - name: Check out repository code
        uses: actions/checkout@v4

      # √âtape 3 : Restaure le cache des d√©pendances (node_modules)
      # Cela permet de r√©utiliser les d√©pendances d√©j√† install√©es et sauvegard√©es dans le cache,
      # ce qui peut acc√©l√©rer les builds en √©vitant de r√©installer les d√©pendances √† chaque fois.
      - name: Restore cache (node_modules)
        uses: actions/cache/restore@v4  # Utilise l'action de cache pour restaurer le cache
        with:
          path: |
            node_modules
            /home/runner/.cache/Cypress
          key: ${{ runner.os }}-node_modules-${{ hashFiles('**/package-lock.json') }}  # Cl√© unique pour identifier le cache
          # Cela permet de s'assurer que le cache est restaur√© correctement

      ## √âtape 4 : Ex√©cute les tests end-to-end en mode headless (sans interface graphique)
      #- name: Test
      #  run: |
       #   npm run e2e:headless

     # √âtape 4 : Construit le projet Next.js
      - name: Build Next.js app
        run: |
          npm run build

     # √âtape 5 : Ex√©cute les tests end-to-end avec Cypress sur diff√©rents navigateurs
      - name: Run Cypress tests
        uses: cypress-io/github-action@v6
        with:
          browser: ${{ matrix.browser }}
          start: npm start
          wait-on: 'http://localhost:3000'

      # √âtape 5 : Affiche un message indiquant le statut du job
      - run: echo "üçè This job's status is ${{ job.status }}."

       # √âtape 6 : Upload de la vid√©o des tests Cypress
      - name: Upload Cypress videos
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: cypress-test-videos-${{ matrix.browser }}
          path: cypress/videos/
          retention-days: 5

      # √âtape 7 : Upload des screenshots des tests Cypress √©chou√©s
      - name: Upload Cypress screenshots
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: cypress-test-screenshots-${{ matrix.browser }}
          path: cypress/screenshots
          retention-days: 5